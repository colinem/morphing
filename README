########  P L A N   D E   T R A V A I L ########

TO DO LIST
- créer les .h (header)
- faire un malloc tab_taille_8 puis faire malloc tab_taille_16 (tester malloc pour agrandir taille tableau)
- réapprendre à definitr une structure

DIFFERENTES PARTIES
- image / pixels (Coline)
- triangulation / points (Anaïs) : créer une matrice de point avec des triangles qui respecte la triangulation de delaunnay
- gestion d'évènements
- transparence / fusion couleur (pixel) --> application formules

STRUCTURES qui vont être utilisées
struc pixel (coord xy, rgb)
struc image (tab pixel)
struc triangle (ptsA, ptsB, ptsC )


D'après les propriétés précédentes, on peut remarquer qu'avec deux triangles ABD et BCD donnés (voir figure), la somme des angles α et γ est inférieure ou égale à 180° si et seulement si ces triangles respectent la condition de Delaunay.

On construit ainsi un algorithme direct : on génère d'abord une triangulation quelconque, puis on bascule les arêtes jusqu'à ce que tous les triangles soient de Delaunay.
|||||| => recursif ou while (test_if_delaunnay == true) |||||
Cette méthode peut nécessiter O(n2) basculements d'arêtes et ne peut se généraliser en dimension 3 ou supérieure2.




######   N O T E S   A N A I S   ######
## étapes :
- tracer des points
- tracer des droites
- tracer des triangles
- calculer des triangles
- ajouter des pointes

## méthodes :
- créate point
- draw_between(ptA, ptB)
- 

## object / entités
point 
triangle (pta, ptb, ptc)
tab de point [pt1, pt2, pt3...]
tab de triangle